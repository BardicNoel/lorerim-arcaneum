var d=Object.defineProperty;var y=(u,t,e)=>t in u?d(u,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):u[t]=e;var g=(u,t,e)=>y(u,typeof t!="symbol"?t+"":t,e);import{g as C}from"./index-CIpn_Jpm.js";class f{static isValid(t){return typeof t=="object"&&t!==null&&typeof t.name=="string"&&typeof t.baseEnchantmentId=="string"&&typeof t.enchantmentType=="string"&&typeof t.targetType=="string"&&["touch","self"].includes(t.targetType)&&Array.isArray(t.effects)&&Array.isArray(t.wornRestrictions)&&Array.isArray(t.foundOnItems)&&typeof t.globalFormId=="string"&&typeof t.plugin=="string"&&typeof t.foundOnItemsTrimmed=="string"}static equals(t,e){return t.baseEnchantmentId===e.baseEnchantmentId}static addComputedProperties(t,e){const s=t.effects.length>0,o=t.effects.length,a=t.targetType==="touch",r=t.targetType==="self",n=t.foundOnItems.length,i=this.generateTags(t,{hasEffects:s,isWeaponEnchantment:a,isArmorEnchantment:r,category:e}),h=this.createSearchableText(t,e);return{...t,hasEffects:s,effectCount:o,isWeaponEnchantment:a,isArmorEnchantment:r,itemCount:n,tags:i,searchableText:h,category:e}}static generateTags(t,e){const s=[];s.push(t.targetType),s.push(e.category),e.hasEffects&&s.push("Has Effects"),e.isWeaponEnchantment&&s.push("Weapon Enchantment"),e.isArmorEnchantment&&s.push("Armor Enchantment");const o=[...new Set(t.foundOnItems.map(a=>a.type))];return s.push(...o),s.push(t.plugin),t.effects.forEach(a=>{s.push(a.name)}),[...new Set(s)]}static createSearchableText(t,e){return[t.name,e,t.plugin,...t.effects.map(o=>`${o.name} ${o.description}`),...t.foundOnItems.map(o=>`${o.name} ${o.type}`),...t.wornRestrictions].join(" ").toLowerCase()}static filterEnchantments(t,e){return t.filter(s=>!(e.categories.length>0&&!e.categories.includes(s.category)||e.targetTypes.length>0&&!e.targetTypes.includes(s.targetType)||e.itemTypes.length>0&&!s.foundOnItems.some(a=>e.itemTypes.includes(a.type))||e.plugins.length>0&&!e.plugins.includes(s.plugin)||e.hasEffects!==null&&s.hasEffects!==e.hasEffects||e.hasWornRestrictions!==null&&s.wornRestrictions.length>0!==e.hasWornRestrictions||e.minItemCount!==null&&s.itemCount<e.minItemCount||e.maxItemCount!==null&&s.itemCount>e.maxItemCount))}static sortEnchantments(t,e,s){return[...t].sort((a,r)=>{let n,i;switch(e){case"name":n=a.name.toLowerCase(),i=r.name.toLowerCase();break;case"category":n=a.category.toLowerCase(),i=r.category.toLowerCase();break;case"targetType":n=a.targetType,i=r.targetType;break;case"plugin":n=a.plugin.toLowerCase(),i=r.plugin.toLowerCase();break;case"itemCount":n=a.itemCount,i=r.itemCount;break;default:n=a.name.toLowerCase(),i=r.name.toLowerCase()}return n<i?s==="asc"?-1:1:n>i?s==="asc"?1:-1:0})}static searchEnchantments(t,e){const s=e.toLowerCase(),o=[];return t.forEach(a=>{let r=0;const n=[];a.name.toLowerCase().includes(s)&&(r+=10,n.push("name")),a.effects.forEach(i=>{i.name.toLowerCase().includes(s)&&(r+=5,n.push("effect")),i.description.toLowerCase().includes(s)&&(r+=3,n.push("effect_description"))}),a.category.toLowerCase().includes(s)&&(r+=4,n.push("category")),a.plugin.toLowerCase().includes(s)&&(r+=2,n.push("plugin")),a.foundOnItems.forEach(i=>{i.name.toLowerCase().includes(s)&&(r+=3,n.push("item"))}),a.tags.forEach(i=>{i.toLowerCase().includes(s)&&(r+=1,n.push("tag"))}),r>0&&o.push({enchantment:a,score:r,matchedFields:[...new Set(n)]})}),o.sort((a,r)=>r.score-a.score)}static filterByEnchantmentType(t,e){return t.filter(s=>e==="weapon"?s.isWeaponEnchantment:e==="armor"?s.isArmorEnchantment:!0)}static formatWornRestriction(t){return{ArmorBoots:"Armor Footwear",ArmorHelmet:"Armor Headgear",ArmorCuirass:"Armor Body",ArmorGauntlets:"Armor Hands",ArmorShield:"Armor Shield",ArmorGreaves:"Armor Legs",ClothingFeet:"Clothing Footwear",ClothingHead:"Clothing Headgear",ClothingBody:"Clothing Body",ClothingHands:"Clothing Hands",ClothingRing:"Rings",ClothingNecklace:"Necklaces",ClothingCirclet:"Circlets",WeapMaterialWood:"Wooden Weapons",WeapMaterialSteel:"Steel Weapons",WeapMaterialOrcish:"Orcish Weapons",WeapMaterialIron:"Iron Weapons",WeapMaterialGlass:"Glass Weapons",WeapMaterialElven:"Elven Weapons",WeapMaterialEbony:"Ebony Weapons",WeapMaterialDwarven:"Dwarven Weapons",WeapMaterialDaedric:"Daedric Weapons"}[t]||t}static filterByArmorRestriction(t,e){return t.filter(s=>s.wornRestrictions.includes(e))}static filterByFuzzySearch(t,e){if(!e)return t;const s=e.toLowerCase();return t.filter(o=>o.searchableText.toLowerCase().includes(s))}static getStatistics(t){const e=t.length,s=[...new Set(t.map(c=>c.category))],o=[...new Set(t.map(c=>c.plugin))],a=[...new Set(t.map(c=>c.targetType))],r=[...new Set(t.flatMap(c=>c.foundOnItems.map(p=>p.type)))],n=t.filter(c=>c.hasEffects).length,i=t.filter(c=>c.wornRestrictions.length>0).length,h=e>0?t.reduce((c,p)=>c+p.itemCount,0)/e:0;return{totalEnchantments:e,categories:s.length,plugins:o.length,targetTypes:a.length,itemTypes:r.length,withEffects:n,withRestrictions:i,averageItemCount:Math.round(h*100)/100}}}const l=class l{constructor(){g(this,"cache",null);g(this,"lastFetch",0);g(this,"CACHE_DURATION",5*60*1e3)}static getInstance(){return l.instance||(l.instance=new l),l.instance}async loadEnchantments(){if(this.cache&&Date.now()-this.lastFetch<this.CACHE_DURATION)return this.cache;try{const t=C("data/enchantment-primer.json"),e=await fetch(t);if(!e.ok)throw new Error(`Failed to fetch enchantments: ${e.status} ${e.statusText}`);const s=await e.json(),o=[];let a=0,r=0;for(const n of s.categories)for(const i of n.enchantments)if(f.isValid(i)){const h=f.addComputedProperties(i,n.name);o.push(h),a++}else console.warn("EnchantmentDataProvider: Invalid enchantment data:",i),r++;return this.cache=o,this.lastFetch=Date.now(),o}catch(t){throw t}}async getEnchantmentData(){const t=await this.loadEnchantments(),e=f.getStatistics(t);return{enchantments:t,totalCount:e.totalEnchantments,categoryNames:e.categories,targetTypes:e.targetTypes,plugins:e.plugins,lastUpdated:new Date().toISOString()}}async getEnchantmentByBaseId(t){return(await this.loadEnchantments()).find(s=>s.baseEnchantmentId===t)||null}async getEnchantmentsByCategory(t){return(await this.loadEnchantments()).filter(s=>s.category===t)}async getEnchantmentsByTargetType(t){return(await this.loadEnchantments()).filter(s=>s.targetType===t)}async getEnchantmentsByPlugin(t){return(await this.loadEnchantments()).filter(s=>s.plugin===t)}clearCache(){this.cache=null,this.lastFetch=0}getCacheStatus(){return{hasCache:this.cache!==null,age:this.cache?Date.now()-this.lastFetch:0}}};g(l,"instance");let m=l;export{m as EnchantmentDataProvider};
